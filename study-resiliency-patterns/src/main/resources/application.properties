spring.application.name=study-resiliency-patterns

# retry configuration
resilience4j.retry.instances.service-a.max-attempts=3
resilience4j.retry.instances.service-a.wait-duration=10s
resilience4j.retry.instances.service-a.retry-exceptions=java.lang.Throwable
resilience4j.retry.instances.service-a.enable-exponential-backoff=true
resilience4j.retry.instances.service-a.exponential-backoff-multiplier=2

# rate-limiter configuration
resilience4j.ratelimiter.instances.service-b.limit-for-period=5
resilience4j.ratelimiter.instances.service-b.limit-refresh-period=5s
resilience4j.ratelimiter.instances.service-b.timeout-duration=1s
resilience4j.ratelimiter.instances.service-b.event-consumer-buffer-size=10

# retry configuration
resilience4j.retry.instances.service-b.max-attempts=5
resilience4j.retry.instances.service-b.wait-duration=1s
resilience4j.retry.instances.service-b.retry-exceptions=io.github.resilience4j.ratelimiter.RequestNotPermitted
resilience4j.retry.instances.service-b.enable-exponential-backoff=true
resilience4j.retry.instances.service-b.exponential-backoff-multiplier=2

# time-limiter configuration
resilience4j.timelimiter.instances.service-c.timeout-duration=8s

# circuit-breaker configuration
# closed state --> open state
resilience4j.circuitbreaker.instances.fun.failure-rate-threshold=20
# open state -- after 3 seconds -> half-open state 
resilience4j.circuitbreaker.instances.fun.wait-duration-in-open-state=20s
# half-open state --> open state 
resilience4j.circuitbreaker.instances.fun.max-wait-duration-in-half-open-state=5s
# half-open state --> closed state 
resilience4j.circuitbreaker.instances.fun.permitted-number-of-calls-in-half-open-state=10
resilience4j.circuitbreaker.instances.fun.minimum-number-of-calls=8


resilience4j.bulkhead.instances.run.max-concurrent-calls=40
resilience4j.bulkhead.instances.run.event-consumer-buffer-size=100
resilience4j.bulkhead.instances.run.max-wait-duration=10s
